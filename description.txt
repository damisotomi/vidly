This is a video rental application
username=vidly
password=vidly

What has been done so far
1. created a virtual env
2. Installed django into the virtual env
3. created a django project and app named vidly
4. Registered the app to the main project
5. redirected the home url to the app home url
6. created movie and genre tables and migrated to the db
7. Registered the models to the admin site and adjusted some things to be displayed
8. took nav bar and starter codes from bootstrap
9. Wrapped the web body into the centre of the page
10.Added borders and hover to the tables
11. we moved our templates into a folder named movies inside the templates folder and ensured wherever
we call it, we include the folder name as a prefix
12. We moved our base template into a central location so all other apps can benefit and we changed the Added 
to the settings for templates so django can know where the search first before searching the install apps
13. Created a detail view for our movies. but used function based view not class
14. for the links to our detail view, we used a parameter named app_name to change the way we pass url
15. created and published an api for the web app for other applications to consume using django-tastypie
15b.practically it means we would expose new endpoints(urls) that start with api. E.g www.vidly.com/api/xyz
15 Found out about creating api using tastypie not restframework 
16. We install tastypie and also started a new app called api which will be responsible for exposing
api endpoints
17. In the api world we call the items we want to expose a resource.So we expose some of our resource using urls
18. We create a model in the api.models file and inherit from tasty pies modelresource class
19. We overwrote some attiributes then added a new url to the vidly urls file
20. imported the movieresource class from our api app in the vidly url file and then redirected api/movies
21. All movie data are serialized as json and can be accessed from api/movies/
22 We excluded the date created attiributes from being exposed in our api
23.Deploying to Heroku. First step is to create an heroku account at heroku.com
24. install heroku cli. just search for heroku cli on google
25. install git
26. check git version using git --version in the terminal here
27. Theres a difference btw production environment(where users access the finished app) and testing env(where users can test the app).
28. we install gunicorn which is a light weight development server for python env. pip install gunicorn. do the ssame for heroku
29. we then create a new file called "Procfile". No extension. this is what heroku looks at to start our app.
30. we type a code into the file. check file for code. wsgi means webserver gateway interface
31. we create a static file in our base directory and add a STATIC_ROOT to our vidly settings. Similar to what we did in shopifys challenge
32. we run py manage.py collectstatic to collect all static files and put in the static folder. This wasnt sth i did in shopifys app.
33. if i had static files in my movies app and i run this command, they will all end up in the static folder
34. we install whitnoise to serve the static files in heroku. this is similar to what we did for shopify then we add 
some settings to the middleware and also static files storage 
35. for the middle ware part we can get the code on pypi. search for whitenoise, click on documentation go to step 2 and copy code
36. To deploy to heroku we need to add a local git repository  so that heroku can be tracking the changes in this local git repository for changes.
37. Think of it as how we have a git on your computer and on github. wherever changes are made in either place, the other one allows you push or pull the changes
38. the thing is we have 2 repository. one is local which we first commit our changes to then the second is online(github or heroku in this case) where we push our commits to 
38. The idea is that the local repository and the online repository match. Heroku in this case is going to serve as our online repositry
39. What we have been doing with git desktop is like killing 2 birds with one stone. Now we kill each bird separtely here
40. run "git init" to intiaillize git then run "git add ." to  add the files to a staging area. then "git  commit -m "comment" " to commit the changes 
41. Run "heroku login" in the terminal
42. run "heroku create nameofapp. I did "heroku create dami-sotomi-vidly"
43. next we push all our code to heroku by running 'git push heroku master'. this pushes the changes in our local repositoryin the 
master branch to the heroku repository. If i wanted to push to git hub too, i will do sth similar.
44. So i can actually have a git hub repository for this app as well and push changes there and also pull changes from there and then push these changes to heroku. You can have as many remotes on a git installation. So i can push to either github or heroku(because unlike azure, heroku takes the git space so when you push, it goes to heroku)
so if i had my github already set up i could do.
"git push origin master"
and for heroku do
"git push heroku master"

to set up the github, i could first create a repo on github and call it vidly then 
"git remote add origin vidly"

push to it by doing
"git push origin master"
master means name of branch. Heroku also allows you communicate with github to see code difference but we are not doing that. we just want to push our codes separately and deploy when we are satisfied

45.I had an issue deploying to heroku because it was asking for tkinter sth. so what i noticed was that in my models app
it was importing one turtle module which i didnt put my self so i removed it. 
we add the website to the allowed host list in the settings file.
46. We run "heroku open" to open the app
